:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+title: Config
#+author: C√©dric Da Fonseca

* Level 1: Hangar ¬∑ Introduction
#+begin_quote
Welcome to Doom, soldier. Now shut up and start +fighting+ coding because
there's no time to waste!
#+end_quote
Welcome again, this is my personal Emacs configuration for the [[https://github.com/doomemacs/doomemacs][Doom]] framework.
In this ~config.org~ file lies most of my Emacs config. This is a literate
config, this means, the code that I stole from more competent person than myself
will be generated to a nice Emacs config.

Why literate? Well this allows me to have a nicely organized configuration, with
lots of comments which helps to give a false sense of order and quality.
** Before we start
What better to kick off this configuration than putting a line of code that I
have no idea what it does? Apparently it helps things running faster, me like
fast.
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Level 2: Nuclear Plant ¬∑ Let's get personal
Please allow me to introduce myself.
#+begin_src emacs-lisp
(setq user-full-name "C√©dric Da Fonseca"
      user-mail-address "captain.spof@gmail.com")
#+end_src
* Level 3: Toxin Refinery ¬∑ Defaults be bad
This is the customary browsing through the game settings to change the default
parameters‚Ä¶

I often use ~zt~, ~zz~ and ~zb~ to scroll through my window, this help to keep a
tiny bit of context above and bellow the current line.
#+begin_src emacs-lisp
(setq-default scroll-margin 3)
#+end_src
** Neat ¬∑ üì∑
When using ~evil-mode~, you can rebind ~v~ to ~er/expand-region~, this is super
useful, keep hitting ~v~ to further expand the selection!
#+begin_src emacs-lisp
(map!
 (:map 'override
   :v "v" #'er/expand-region
   :v "V" #'er/contract-region))
#+end_src
#+begin_quote
When I bring up Doom's scratch buffer with SPC x, it's often to play with elisp
or note something down (that isn't worth an entry in my notes). I can do both in
`lisp-interaction-mode'.

    ---hlissner
#+end_quote

#+begin_src emacs-lisp
(setq doom-scratch-initial-major-mode 'lisp-interaction-mode)
#+end_src

* Level 4: Command Control ¬∑ Doom, but it's my personal hell
Here, I'll put configuration for the module built-in ~doom~. Either grouped by
package, or by theme.
** Themes ¬∑ pretty little thing ~:ui~

This might change from time to time, but currently I am rocking‚Ä¶
#+begin_src emacs-lisp
(setq doom-theme 'modus-vivendi)
#+end_src
*** Splash screen

Ferris is just too cute, I need to see him everyday‚Ä¶
#+begin_src emacs-lisp
(setq fancy-splash-image (expand-file-name "misc/splash-images/ferris.svg" doom-private-dir))
#+end_src
‚Ä¶and only him, remove the dashboard shortcuts, I'll customize them later anyway.
#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src

*** Dashboard
**** Configuration & Mapping

#+begin_quote :
When using the dashboard, there are often a small number of actions I will take.
As the dashboard is it's own major mode, there is no need to suffer the tyranny
of unnecessary keystrokes --- we can simply bind common actions to a single key!

    ---Tecosaur
#+end_quote
‚òù What he says, also adding some shortcuts of my own.
#+begin_src emacs-lisp
(defun +doom-dashboard-setup-modified-keymap ()
  (setq +doom-dashboard-mode-map (make-sparse-keymap))
  (map! :map +doom-dashboard-mode-map
        :desc "Find file"            :ne "f" #'find-file
        :desc "Recent files"         :ne "r" #'consult-recent-file
        :desc "Restore last session" :ne "R" #'doom/restart-and-restore
        :desc "Config dir"           :ne "C" #'doom/open-private-config
        :desc "Open config.org"      :ne "c" (cmd! (find-file (expand-file-name "config.org" doom-private-dir)))
        :desc "Open dotfile"         :ne "." (cmd! (doom-project-find-file "~/.config/"))
        :desc "Notes (roam)"         :ne "n" #'org-roam-node-find
        :desc "Switch buffer"        :ne "b" #'+vertico/switch-workspace-buffer
        :desc "Switch buffers (all)" :ne "B" #'consult-buffer
        :desc "IBuffer"              :ne "i" #'ibuffer
        :desc "Projects"             :ne "p" #'project-switch-project
        :desc "Set theme"            :ne "t" #'consult-theme
        :desc "Quit"                 :ne "Q" #'save-buffers-kill-terminal
        :desc "Show keybindings"     :ne "h" (cmd! (which-key-show-keymap '+doom-dashboard-mode-map))))

(add-transient-hook! #'+doom-dashboard-mode (+doom-dashboard-setup-modified-keymap))
(add-transient-hook! #'+doom-dashboard-mode :append (+doom-dashboard-setup-modified-keymap))
(add-hook! 'doom-init-ui-hook :append (+doom-dashboard-setup-modified-keymap))
#+end_src

#+begin_quote
Unfortunately the show keybindings help doesn't currently work as intended, but
this is still quite nice overall.

Now that the dashboard is so convenient, I'll want to make it easier to get to.

    ---Tecosaur
#+end_quote

#+begin_src emacs-lisp
(map! :leader :desc "Dashboard" "D" #'+doom-dashboard/open)
#+end_src
*** Modeline
**** Configuration
What is that little ball in the left bottom doing anyway? Remove it!
#+begin_src emacs-lisp
;; An evil mode indicator is redundant with cursor shape
(advice-add #'doom-modeline-segment--modals :override #'ignore)
#+end_src

Show current workspace in modeline.
#+begin_src emacs-lisp
(setq doom-modeline-persp-name t)
#+end_src

** Checkers ¬∑ ~:checker~
*** ~langtool~
**** Configuration
~langtool~ isn't cutting it for me, I'll setup ~languagetool.el~ latter on.
#+begin_src emacs-lisp :tangle packages.el
(package! langtool :disable t)
#+end_src
** Tools ¬∑ the sharpest ~:tool~ in the shed
*** ~lookup~ ¬∑ ¬´ Ahh we used to look up at the sky and wonder‚Ä¶¬ª
**** Mapping
In situation when I need to quickly look a word definition to not look too dumb.
#+begin_src emacs-lisp
(map!
 (:when (modulep! :tools lookup)
   :n "z?" #'define-word-at-point))
#+end_src
** ~evil~ ¬∑ the necessary one
*** Configuration

When creating window split, it's nice to jump straight to them.
#+begin_src emacs-lisp
(after! evil
  (setq evil-split-window-below t
        evil-vsplit-window-right t))
#+end_src

Save a few key stroke, open up ~projecile-find-file~ while we're at it.

#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (project-find-file))
#+end_src

I like my s/../.. to by global by default
#+begin_src emacs-lisp
(after! evil
  (setq evil-ex-substitute-global t))
#+end_src

I use ~o~, ~O~ often, but not much for amending comments, let's disable that.
#+begin_src emacs-lisp
(after! evil
  (setq +evil-want-o/O-to-continue-comments nil))
#+end_src

*** Mapping
Habits die hard, I use ~q~ to close most things, I want to close buffer too.
This mean macro should be relocated to ~Q~.
#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key evil-normal-state-map "q" 'evil-quit)
  (define-key evil-motion-state-map (kbd "Q") 'evil-record-macro))
#+end_src
** ~dired~ ¬∑ ¬´ Our last resort, in these dire times ¬ª
*** Mapping
Conveniently Doom doesn't use ~SPC d~ and I use dired often, so let's add a few
key bindings.
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("d" . "dired")
       :desc "Dired"                       "." #'dired
       :desc "Dired jump to current"       "d" #'dired-jump
       :desc "fd input to dired"           "f" #'fd-dired
       :desc "Dired into project root"     "p" #'project-dired
       :desc "open dired in another frame" "D" #'dired-other-window))
#+end_src
** ~org~ ¬∑
*** Configuration

I use ~syncthing~ to share files between my computers, it's also handy to sync
org files to my phone. Let's setup the org directory.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Sync/Org/"
      org-agenda-files (directory-files-recursively "~/Sync/Org/" "\\.org$"))
#+END_SRC

Sometimes it nice to be able to use the mouse.
#+begin_src emacs-lisp
(use-package! org-mouse)
#+end_src



*** ~org-modern~
**** Configuration

#+begin_quote
Fontifying org-mode buffers to be as pretty as possible is of paramount
importance, and Minad‚Äôs lovely org-modern goes a long way in this regard.

---Tecosaur
#+end_quote


#+begin_src emacs-lisp :tangle packages.el
(package! org-modern)
#+end_src

This is shamelessly stolen from Tecosaur's, I'll need to customize more to my
liking and remove the things I don't use.

#+begin_src emacs-lisp
(after! org
  (use-package! org-modern
    :hook (org-mode . org-modern-mode)
    :config
    (setq org-modern-star '("‚óâ" "‚óã" "‚ú∏" "‚úø" "‚ú§" "‚úú" "‚óÜ" "‚ñ∂")
          org-modern-table-vertical 1
          org-modern-table-horizontal 0.2
          org-modern-list '((43 . "‚û§")
                            (45 . "‚Äì")
                            (42 . "‚Ä¢"))
          org-modern-todo-faces

          '(("TODO" :inverse-video t :inherit org-todo)
            ("PROJ" :inverse-video t :inherit +org-todo-project)
            ("STRT" :inverse-video t :inherit +org-todo-active)
            ("[-]"  :inverse-video t :inherit +org-todo-active)
            ("HOLD" :inverse-video t :inherit +org-todo-onhold)
            ("WAIT" :inverse-video t :inherit +org-todo-onhold)
            ("[?]"  :inverse-video t :inherit +org-todo-onhold)
            ("KILL" :inverse-video t :inherit +org-todo-cancel)
            ("NO"   :inverse-video t :inherit +org-todo-cancel))
          org-modern-footnote
          (cons nil (cadr org-script-display))
          org-modern-block-fringe nil
          org-modern-block-name
          '((t . t)
            ("src" "¬ª" "¬´")
            ("example" "¬ª‚Äì" "‚Äì¬´")
            ("quote" "‚ùù" "‚ùû")
            ("export" "‚è©" "‚è™"))
          org-modern-progress nil
          org-modern-priority nil
          org-modern-horizontal-rule (make-string 36 ?‚îÄ)
          org-modern-keyword
          '((t . t)
            ("title" . "ùôè")
            ("subtitle" . "ùô©")
            ("author" . "ùòº")
            ("email" . #("ÓÉ°" 0 1 (display (raise -0.14))))
            ("date" . "ùòø")
            ("property" . "‚ò∏")
            ("options" . "‚å•")
            ("startup" . "‚èª")
            ("macro" . "ùìú")
            ("bind" . #("ÓÖó" 0 1 (display (raise -0.1))))
            ("include" . "‚á§")
            ("setupfile" . "‚áö")
            ("name" . "‚Åç")
            ("header" . "‚Ä∫")
            ("caption" . "‚ò∞")
            ("RESULTS" . "ü†∂")))
    (custom-set-faces! '(org-modern-statistics :inherit org-checkbox-statistics-todo))))
#+end_src

*** ~org-modern-indent~
#+begin_quote
org-modern and org-indent, working together
    ---jdtsmith
#+end_quote

**** Configuration
Indenting headings in ~org-mode~ helps me find my way, so I was a bit sad when I
learned that it wasn't possible to see the nice block style with ~org-modern~.
~org-modern-indent~ to the rescue.
#+begin_src emacs-lisp :tangle packages.el
(package! org-modern-indent
  :recipe (:host github :repo "jdtsmith/org-modern-indent"))
#+end_src

#+begin_src  emacs-lisp
(use-package! org-modern-indent
  :hook
  (org-indent-mode . org-modern-indent-mode))
#+end_src
* Level 5: Phobos Lab ¬∑ Packages
** ~blamer~ ¬∑ who wrote that crap!? (probably me.)
*** Configuration & Mapping

I sometimes need to quickly know who made a modification, ~blamer.el~ helps me
by showing commit information at a glance.

#+begin_src emacs-lisp :tangle packages.el
(package! blamer) ;; https://github.com/Artawower/blamer.el
#+end_src

Let's customize the face and add a few key bindings.
#+begin_src emacs-lisp
(use-package! blamer
  :defer 20
  :custom
  (blamer-idle-time 0.3)
  (blamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                   :background nil
                   :italic t)))
  :init
  (map!
   :leader
     (:prefix-map ("g" . "git")
       :desc  "Blamer posframe commit info" "," #'blamer-show-posframe-commit-info
       :desc  "Blamer mode"                 ";" #'blamer-mode)))
#+end_src
** ~languagetool~ ¬∑ Squiggly line my prose
Doom's ship ~Emacs-langtool~ but I prefer ~languagetool.el~, let's set it up.

**** Configuration & Mapping
#+begin_src emacs-lisp :tangle packages.el
(package! languagetool) ;; https://github.com/PillFall/languagetool.el
#+end_src

~languagetool~ being a Java program, it needs to be shown the way to its .jar,
let's obliged.
#+begin_src emacs-lisp
(use-package! languagetool
  :config
  (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8")
        languagetool-correction-language "en-US"  ;; 'auto' seems to target "en", which isn't working as well as 'en-US'
        languagetool-console-command "/etc/profiles/per-user/daf/share/languagetool-commandline.jar"
        languagetool-server-command "/etc/profiles/per-user/daf/share/languagetool-server.jar")
  :init
  (map!
   (:prefix ("z~" . "languagetool")
                         :n "b" #'languagetool-correct-buffer
                         :n "c" #'languagetool-correct-at-point
    :desc "set language" :n "l" #'(lambda() (interactive) (languagetool-set-language (completing-read "lang: " '("fr" "en-US"))))
                         :n "~" #'languagetool-check)))
#+end_src
** ~ef-themes~
*** Configuration
#+begin_src emacs-lisp :tangle packages.el
(package! ef-themes)
#+end_src

#+begin_src emacs-lisp
(use-package! ef-themes
    :config
    (setq ef-themes-variable-pitch-ui t
          ef-themes-mixed-fonts t
          ef-themes-headings ; read the manual's entry of the doc string
          '((0 . (variable-pitch light 1.9))
            (1 . (variable-pitch light 1.8))
            (2 . (variable-pitch regular 1.7))
            (3 . (variable-pitch regular 1.6))
            (4 . (variable-pitch regular 1.5))
            (5 . (variable-pitch 1.4)) ; absence of weight means `bold'
            (6 . (variable-pitch 1.3))
            (7 . (variable-pitch 1.2))
            (t . (variable-pitch 1.1)))))
#+end_src

** ~modus-themes~
*** Configuration
#+begin_src emacs-lisp :tangle packages.el
(package! modus-themes)
#+end_src

#+begin_src emacs-lisp
(use-package! modus-themes
    :config
    (setq modus-themes-variable-pitch-ui t
          modus-themes-mixed-fonts t
          modus-themes-headings ; read the manual's entry of the doc string
          '((0 . (variable-pitch light 1.9))
            (1 . (variable-pitch light 1.8))
            (2 . (variable-pitch regular 1.7))
            (3 . (variable-pitch regular 1.6))
            (4 . (variable-pitch regular 1.5))
            (5 . (variable-pitch 1.4)) ; absence of weight means `bold'
            (6 . (variable-pitch 1.3))
            (7 . (variable-pitch 1.2))
            (t . (variable-pitch 1.1)))))
#+end_src

** ~fontaine~ ¬∑
*** Configuration
#+begin_src emacs-lisp :tangle packages.el
(package! fontaine)
#+end_src
#+begin_src emacs-lisp
(use-package! fontaine
  :config
  ;; This is defined in Emacs C code: it belongs to font settings.
  (setq x-underline-at-descent-line nil)

  ;; And this is for Emacs28.
  (setq-default text-scale-remap-header-line t)

  ;; This is the default value.  Just including it here for
  ;; completeness.
  (setq fontaine-latest-state-file (locate-user-emacs-file "fontaine-latest-state.eld"))

  ;; Iosevka Comfy is my highly customised build of Iosevka with
  ;; monospaced and duospaced (quasi-proportional) variants as well as
  ;; support or no support for ligatures:
  ;; <https://git.sr.ht/~protesilaos/iosevka-comfy>.
  ;;
  ;; Iosevka Comfy            == monospaced, supports ligatures
  ;; Iosevka Comfy Fixed      == monospaced, no ligatures
  ;; Iosevka Comfy Duo        == quasi-proportional, supports ligatures
  ;; Iosevka Comfy Wide       == like Iosevka Comfy, but wider
  ;; Iosevka Comfy Wide Fixed == like Iosevka Comfy Fixed, but wider
  ;; Iosevka Comfy Motion     == monospaced, supports ligatures, fancier glyphs
  ;; Iosevka Comfy Motion Duo == as above, but quasi-proportional
  (setq fontaine-presets
        '((small
           :default-family "Iosevka Comfy Wide Fixed"
           :default-height 100
           :variable-pitch-family "Iosevka Comfy Duo")  ;; FIXME: couldn't build derivation with Iosevka Comfy Wide Duo
          (regular
           :default-height 120)
          (large
           :default-weight semilight
           :default-height 160
           :bold-weight extrabold)
          (code-demo
           :default-family "Iosevka Comfy Fixed"
           :default-weight semilight
           :default-height 190
           :variable-pitch-family "Iosevka Comfy Duo"
           :bold-weight extrabold)
          (presentation
           :default-weight semilight
           :default-height 220
           :bold-weight extrabold)
          (t
           ;; I keep all properties for didactic purposes, but most can be
           ;; omitted.  See the fontaine manual for the technicalities:
           ;; <https://protesilaos.com/emacs/fontaine>.
           :default-family "Iosevka Comfy"
           :default-weight regular
           :default-height 120
           :fixed-pitch-family nil ; falls back to :default-family
           :fixed-pitch-weight nil ; falls back to :default-weight
           :fixed-pitch-height 1.0
           :fixed-pitch-serif-family nil ; falls back to :default-family
           :fixed-pitch-serif-weight nil ; falls back to :default-weight
           :fixed-pitch-serif-height 1.0
           :variable-pitch-family "Iosevka Comfy Motion Duo"
           :variable-pitch-weight nil
           :variable-pitch-height 1.0
           :bold-family nil ; use whatever the underlying face has
           :bold-weight bold
           :italic-family nil
           :italic-slant italic
           :line-spacing nil)))

  ;; Set last preset or fall back to desired style from `fontaine-presets'.
  (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))

  ;; The other side of `fontaine-restore-latest-preset'.
  (add-hook 'kill-emacs-hook #'fontaine-store-latest-preset)

  ;; Persist font configurations while switching themes (doing it with
  ;; my `modus-themes' and `ef-themes' via the hooks they provide).
  (dolist (hook '(modus-themes-after-load-theme-hook ef-themes-post-load-hook))
    (add-hook hook #'fontaine-apply-current-preset))

  (define-key global-map (kbd "C-c f") #'fontaine-set-preset)
  (define-key global-map (kbd "C-c F") #'fontaine-set-face-font))
#+end_src
* Level 6: Central Processing ¬∑ Lang stuff
